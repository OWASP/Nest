import { ChakraProvider } from '@chakra-ui/react'
import { render, screen, cleanup, waitFor } from '@testing-library/react'
import userEvent from '@testing-library/user-event'
import React from 'react'
import { system } from 'utils/theme'

import Modal from 'components/Modal'

// Mock the portal container
beforeEach(() => {
  const portalRoot = document.createElement('div')
  portalRoot.setAttribute('id', 'portal-root')
  document.body.appendChild(portalRoot)
})

afterEach(() => {
  cleanup()
  jest.clearAllTimers()
  jest.restoreAllMocks()
  document.body.innerHTML = ''
})

// Mock FontAwesomeIcon since we don't need to test the actual icon rendering
jest.mock('@fortawesome/react-fontawesome', () => ({
  FontAwesomeIcon: () => <span data-testid="mock-icon" />,
}))

describe('Dialog Component', () => {
  const defaultProps = {
    title: 'Test Modal',
    summary: 'Test Summary',
    hint: 'Test Hint',
    isOpen: true,
    onClose: jest.fn(),
    button: {
      label: 'Test Button',
      onclick: jest.fn(),
      url: 'https://example.com/issue/123',
    },
    children: undefined as React.ReactNode | undefined,
  }

  const renderModal = (props = defaultProps) => {
    return render(
      <ChakraProvider value={system}>
        <Modal {...props} />
      </ChakraProvider>
    )
  }

  it('renders nothing when isOpen is false', () => {
    renderModal({ ...defaultProps, isOpen: false })
    expect(screen.queryByRole('dialog')).not.toBeInTheDocument()
  })

  it('renders the action button and handles its events', async () => {
    const onclick = jest.fn()
    renderModal({ ...defaultProps, button: { ...defaultProps.button, onclick, url: undefined } })

    const actionButton = await screen.findByRole('button', { name: /Test Button/i })
    expect(actionButton).toBeInTheDocument()

    await userEvent.click(actionButton)

    expect(onclick).toHaveBeenCalledTimes(1)
  })

  it('renders the action link and handles its events', async () => {
    const onclick = jest.fn()
    renderModal({
      ...defaultProps,
      button: { ...defaultProps.button, onclick, url: 'https://example.com' },
    })
    const actionLink = await screen.findByRole('link', { name: /Test Button/i })
    expect(actionLink).toBeInTheDocument()
    await userEvent.click(actionLink)
    expect(onclick).toHaveBeenCalledTimes(1)
  })

  it('renders modal with all components when isOpen is true', () => {
    renderModal()

    expect(screen.getByRole('dialog')).toBeInTheDocument()
    expect(screen.getByText('Test Modal')).toBeInTheDocument()
    expect(screen.getByText('Test Summary')).toBeInTheDocument()
    expect(
      screen.getByText(
        'The issue summary and the recommended steps to address it have been generated by AI'
      )
    ).toBeInTheDocument()
    expect(screen.getByText('How to tackle it')).toBeInTheDocument()
  })

  it('renders children content when provided', () => {
    renderModal({
      ...defaultProps,
      children: <div data-testid="child-content">Child Content</div>,
    })

    expect(screen.getByTestId('child-content')).toBeInTheDocument()
  })

  it('calls onClose when close button is clicked', async () => {
    const onClose = jest.fn()
    renderModal({ ...defaultProps, isOpen: true, onClose })
    await waitFor(() => expect(screen.getByRole('dialog')).toBeVisible())
    const closeButton = screen.getByRole('button', { name: /close-modal/i })
    await userEvent.click(closeButton)

    expect(onClose).toHaveBeenCalledTimes(1)
  })

  it('manages body overflow style correctly', () => {
    const { unmount } = renderModal()

    expect(document.body.style.overflow).toBe('hidden')

    unmount()

    expect(document.body.style.overflow).toBe('')
  })

  it('renders with correct accessibility attributes', () => {
    renderModal()

    const dialog = screen.getByRole('dialog')
    expect(dialog).toHaveAttribute('aria-modal', 'true')
    expect(dialog).toHaveAttribute('aria-labelledby', 'modal-title')
    expect(dialog).toHaveAttribute('tabIndex', '-1')
  })

  it('renders without hint section when hint prop is not provided', () => {
    const propsWithoutHint = {
      ...defaultProps,
      hint: undefined,
    }

    renderModal(propsWithoutHint)

    expect(screen.queryByText('How to tackle it')).not.toBeInTheDocument()
  })
})
