name: Generate Models Graph

on:
  push:
    paths:
      - "backend/apps/**/models/**"
      - "pyproject.toml"
      - "README.md"
  workflow_dispatch:

jobs:
  generate-model-graph:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry

      - name: Install system dependencies
        run: |
          sudo apt update
          sudo apt install -y graphviz

      - name: Create and Populate .env File
        run: |
          touch backend/.env  # Ensure the file exists
          echo "DJANGO_SENTRY_DSN=${{ secrets.DJANGO_SENTRY_DSN }}" >> backend/.env
          echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> backend/.env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> backend/.env
          echo "DJANGO_CONFIGURATION=Test" >> backend/.env
          echo "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> backend/.env
          echo "DJANGO_DB_PASSWORD=${{ secrets.DJANGO_DB_PASSWORD }}" >> backend/.env
          echo "DJANGO_ALLOWED_HOSTS=*" >> backend/.env  # Example of a non-secret variable

      - name: Debug .env file
        run: |
          ls -la backend  # Check if the .env file exists
          cat backend/.env | grep -v DJANGO_DB_PASSWORD | grep -v DJANGO_SECRET_KEY

      - name: Prepare secrets
        run: |
          echo "DJANGO_SENTRY_DSN=${{ secrets.DJANGO_SENTRY_DSN }}" >> .env.backend
          echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> backend/.env.backend
          echo "DJANGO_SETTINGS_MODULE=settings.test" >> backend/.env.backend
          echo "DJANGO_CONFIGURATION=Test"
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> backend/.env
          echo "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> backend/.env.backend

      - name: Install dependencies
        run: |
          cd backend
          export $(grep -v '^#' .env.backend | xargs)
          poetry install --no-interaction --no-root --with dev
          poetry add pydotplus  # Ensure pydotplus is installed

      - name: Generate Models Graph
        run: |
          cd backend
          set -a
          source .env.backend
          set +a
          poetry run python manage.py graph_models -a -g -o backend_models.png

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-models-graph
          path: backend/backend_models.png
