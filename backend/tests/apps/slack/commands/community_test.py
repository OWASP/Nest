from unittest.mock import MagicMock, patch

import pytest
from django.conf import settings

from apps.slack.commands.community import COMMAND, community_handler


class TestCommunityHandler:
    @pytest.fixture
    def mock_command(self):
        return {
            "text": "",
            "user_id": "U123456",
        }

    @pytest.fixture
    def mock_client(self):
        client = MagicMock()
        client.conversations_open.return_value = {"channel": {"id": "C123456"}}
        return client

    def test_handler_disabled(self, mock_command, mock_client):
        settings.SLACK_COMMANDS_ENABLED = False

        community_handler(ack=MagicMock(), command=mock_command, client=mock_client)

        mock_client.conversations_open.assert_not_called()
        mock_client.chat_postMessage.assert_not_called()

    def test_handler_enabled(self, mock_command, mock_client):
        settings.SLACK_COMMANDS_ENABLED = True

        community_handler(ack=MagicMock(), command=mock_command, client=mock_client)

        mock_client.conversations_open.assert_called_once_with(users=mock_command["user_id"])
        mock_client.chat_postMessage.assert_called_once()

        blocks = mock_client.chat_postMessage.call_args[1]["blocks"]
        text = "".join(str(block) for block in blocks)

        assert "OWASP community" in text
        assert "feedback" in text.lower() or "nest.owasp.dev" in text.lower()

    def test_handler_with_different_user(self, mock_client):
        settings.SLACK_COMMANDS_ENABLED = True
        custom_command = {"user_id": "U654321", "text": ""}

        community_handler(ack=MagicMock(), command=custom_command, client=mock_client)

        mock_client.conversations_open.assert_called_once_with(users="U654321")

    @patch("apps.slack.apps.SlackConfig.app")
    def test_command_registration(self, mock_app):
        import importlib

        from apps.slack.commands import community

        mock_command_decorator = MagicMock()
        mock_app.command.return_value = mock_command_decorator

        importlib.reload(community)

        mock_app.command.assert_called_once_with(COMMAND)
        assert mock_command_decorator.call_count == 1
        assert mock_command_decorator.call_args[0][0].__name__ == "community_handler"

    @pytest.mark.parametrize(
        ("commands_enabled", "expected_calls"),
        [
            (True, 1),
            (False, 0),
        ],
    )
    def test_community_handler(self, mock_client, mock_command, commands_enabled, expected_calls):
        settings.SLACK_COMMANDS_ENABLED = commands_enabled

        ack = MagicMock()
        community_handler(ack=ack, command=mock_command, client=mock_client)

        ack.assert_called_once()

        assert mock_client.chat_postMessage.call_count == expected_calls

        if commands_enabled:
            mock_client.conversations_open.assert_called_once_with(users="U123456")
            blocks = mock_client.chat_postMessage.call_args[1]["blocks"]
            block_text = blocks[0]["text"]["text"]
            expected_text = (
                "Please visit <https://nest.owasp.dev/community/users/|OWASP community> page\n"
            )
            assert block_text == expected_text
            assert mock_client.chat_postMessage.call_args[1]["channel"] == "C123456"

    def test_community_handler_block_structure(self, mock_client, mock_command):
        """Test the block structure generated by the /community command."""
        settings.SLACK_COMMANDS_ENABLED = True

        ack = MagicMock()
        community_handler(ack=ack, command=mock_command, client=mock_client)

        blocks = mock_client.chat_postMessage.call_args[1]["blocks"]
        assert len(blocks) == 1
        assert blocks[0]["type"] == "section"
        assert blocks[0]["text"]["type"] == "mrkdwn"
        assert "https://nest.owasp.dev/community/members/" in blocks[0]["text"]["text"]
