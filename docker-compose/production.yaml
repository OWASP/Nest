services:
  production-nest-backend:
    container_name: production-nest-backend
    image: owasp/nest:backend-production
    env_file: .env.backend
    entrypoint: [/home/owasp/entrypoint.sh]
    depends_on:
      production-nest-cache:
        condition: service_healthy
      production-nest-db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - nest-app-network
      - nest-cache-network
      - nest-db-network

  production-nest-worker:
    container_name: production-nest-worker
    image: owasp/nest:backend-production
    env_file: .env.backend
    command: >
      sh -c '
        python manage.py rqworker
      '
    depends_on:
      production-nest-cache:
        condition: service_healthy
      production-nest-db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - nest-app-network
      - nest-cache-network
      - nest-db-network

  production-nest-scheduler:
    container_name: production-nest-scheduler
    image: owasp/nest:backend-production
    env_file: .env.backend
    command: >
      sh -c '
        python manage.py rqscheduler
      '
    depends_on:
      production-nest-cache:
        condition: service_healthy
      production-nest-db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - nest-app-network
      - nest-cache-network
      - nest-db-network

  production-nest-cache:
    container_name: production-nest-cache
    image: redis:7.2.7-alpine3.21
    command: >
      sh -c '
        redis-server --requirepass $$REDIS_PASSWORD --maxmemory 100mb --maxmemory-policy allkeys-lru
      '
    env_file: .env.cache
    healthcheck:
      interval: 5s
      retries: 5
      test: [CMD, redis-cli, -a, $$REDIS_PASSWORD, ping]
      timeout: 5s
    restart: unless-stopped
    volumes:
      - ./volumes/cache:/data
    networks:
      - nest-cache-network

  production-nest-db:
    container_name: production-nest-db
    image: pgvector/pgvector:pg16
    env_file: .env.db
    healthcheck:
      interval: 5s
      retries: 5
      test: [CMD, pg_isready, -U, nest-user-production, -d, production-nest-db]
      timeout: 5s
    restart: unless-stopped
    volumes:
      - ./volumes/db:/var/lib/postgresql/data
    networks:
      - nest-db-network

  production-nest-frontend:
    container_name: production-nest-frontend
    env_file: .env.frontend
    image: owasp/nest:frontend-production
    restart: unless-stopped
    networks:
      - nest-app-network

networks:
  nest-app-network:
  nest-cache-network:
  nest-db-network:
